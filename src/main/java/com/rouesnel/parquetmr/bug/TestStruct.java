/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.rouesnel.parquetmr.bug;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TestStruct implements org.apache.thrift.TBase<TestStruct, TestStruct._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TestStruct");

  private static final org.apache.thrift.protocol.TField BINARY_FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("binaryField", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField STRING_FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("stringField", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField BINARY_AS_STRING_FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("binaryAsStringField", org.apache.thrift.protocol.TType.STRING, (short)3);

  public ByteBuffer binaryField; // required
  public String stringField; // required
  public String binaryAsStringField; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BINARY_FIELD((short)1, "binaryField"),
    STRING_FIELD((short)2, "stringField"),
    BINARY_AS_STRING_FIELD((short)3, "binaryAsStringField");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BINARY_FIELD
          return BINARY_FIELD;
        case 2: // STRING_FIELD
          return STRING_FIELD;
        case 3: // BINARY_AS_STRING_FIELD
          return BINARY_AS_STRING_FIELD;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BINARY_FIELD, new org.apache.thrift.meta_data.FieldMetaData("binaryField", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.STRING_FIELD, new org.apache.thrift.meta_data.FieldMetaData("stringField", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BINARY_AS_STRING_FIELD, new org.apache.thrift.meta_data.FieldMetaData("binaryAsStringField", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TestStruct.class, metaDataMap);
  }

  public TestStruct() {
  }

  public TestStruct(
    ByteBuffer binaryField,
    String stringField,
    String binaryAsStringField)
  {
    this();
    this.binaryField = binaryField;
    this.stringField = stringField;
    this.binaryAsStringField = binaryAsStringField;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TestStruct(TestStruct other) {
    if (other.isSetBinaryField()) {
      this.binaryField = org.apache.thrift.TBaseHelper.copyBinary(other.binaryField);
;
    }
    if (other.isSetStringField()) {
      this.stringField = other.stringField;
    }
    if (other.isSetBinaryAsStringField()) {
      this.binaryAsStringField = other.binaryAsStringField;
    }
  }

  public TestStruct deepCopy() {
    return new TestStruct(this);
  }

  @Override
  public void clear() {
    this.binaryField = null;
    this.stringField = null;
    this.binaryAsStringField = null;
  }

  public byte[] getBinaryField() {
    setBinaryField(org.apache.thrift.TBaseHelper.rightSize(binaryField));
    return binaryField == null ? null : binaryField.array();
  }

  public ByteBuffer bufferForBinaryField() {
    return binaryField;
  }

  public TestStruct setBinaryField(byte[] binaryField) {
    setBinaryField(binaryField == null ? (ByteBuffer)null : ByteBuffer.wrap(binaryField));
    return this;
  }

  public TestStruct setBinaryField(ByteBuffer binaryField) {
    this.binaryField = binaryField;
    return this;
  }

  public void unsetBinaryField() {
    this.binaryField = null;
  }

  /** Returns true if field binaryField is set (has been assigned a value) and false otherwise */
  public boolean isSetBinaryField() {
    return this.binaryField != null;
  }

  public void setBinaryFieldIsSet(boolean value) {
    if (!value) {
      this.binaryField = null;
    }
  }

  public String getStringField() {
    return this.stringField;
  }

  public TestStruct setStringField(String stringField) {
    this.stringField = stringField;
    return this;
  }

  public void unsetStringField() {
    this.stringField = null;
  }

  /** Returns true if field stringField is set (has been assigned a value) and false otherwise */
  public boolean isSetStringField() {
    return this.stringField != null;
  }

  public void setStringFieldIsSet(boolean value) {
    if (!value) {
      this.stringField = null;
    }
  }

  public String getBinaryAsStringField() {
    return this.binaryAsStringField;
  }

  public TestStruct setBinaryAsStringField(String binaryAsStringField) {
    this.binaryAsStringField = binaryAsStringField;
    return this;
  }

  public void unsetBinaryAsStringField() {
    this.binaryAsStringField = null;
  }

  /** Returns true if field binaryAsStringField is set (has been assigned a value) and false otherwise */
  public boolean isSetBinaryAsStringField() {
    return this.binaryAsStringField != null;
  }

  public void setBinaryAsStringFieldIsSet(boolean value) {
    if (!value) {
      this.binaryAsStringField = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BINARY_FIELD:
      if (value == null) {
        unsetBinaryField();
      } else {
        setBinaryField((ByteBuffer)value);
      }
      break;

    case STRING_FIELD:
      if (value == null) {
        unsetStringField();
      } else {
        setStringField((String)value);
      }
      break;

    case BINARY_AS_STRING_FIELD:
      if (value == null) {
        unsetBinaryAsStringField();
      } else {
        setBinaryAsStringField((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BINARY_FIELD:
      return getBinaryField();

    case STRING_FIELD:
      return getStringField();

    case BINARY_AS_STRING_FIELD:
      return getBinaryAsStringField();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BINARY_FIELD:
      return isSetBinaryField();
    case STRING_FIELD:
      return isSetStringField();
    case BINARY_AS_STRING_FIELD:
      return isSetBinaryAsStringField();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TestStruct)
      return this.equals((TestStruct)that);
    return false;
  }

  public boolean equals(TestStruct that) {
    if (that == null)
      return false;

    boolean this_present_binaryField = true && this.isSetBinaryField();
    boolean that_present_binaryField = true && that.isSetBinaryField();
    if (this_present_binaryField || that_present_binaryField) {
      if (!(this_present_binaryField && that_present_binaryField))
        return false;
      if (!this.binaryField.equals(that.binaryField))
        return false;
    }

    boolean this_present_stringField = true && this.isSetStringField();
    boolean that_present_stringField = true && that.isSetStringField();
    if (this_present_stringField || that_present_stringField) {
      if (!(this_present_stringField && that_present_stringField))
        return false;
      if (!this.stringField.equals(that.stringField))
        return false;
    }

    boolean this_present_binaryAsStringField = true && this.isSetBinaryAsStringField();
    boolean that_present_binaryAsStringField = true && that.isSetBinaryAsStringField();
    if (this_present_binaryAsStringField || that_present_binaryAsStringField) {
      if (!(this_present_binaryAsStringField && that_present_binaryAsStringField))
        return false;
      if (!this.binaryAsStringField.equals(that.binaryAsStringField))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TestStruct other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TestStruct typedOther = (TestStruct)other;

    lastComparison = Boolean.valueOf(isSetBinaryField()).compareTo(typedOther.isSetBinaryField());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBinaryField()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.binaryField, typedOther.binaryField);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStringField()).compareTo(typedOther.isSetStringField());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStringField()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stringField, typedOther.stringField);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBinaryAsStringField()).compareTo(typedOther.isSetBinaryAsStringField());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBinaryAsStringField()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.binaryAsStringField, typedOther.binaryAsStringField);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // BINARY_FIELD
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.binaryField = iprot.readBinary();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // STRING_FIELD
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.stringField = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // BINARY_AS_STRING_FIELD
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.binaryAsStringField = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.binaryField != null) {
      oprot.writeFieldBegin(BINARY_FIELD_FIELD_DESC);
      oprot.writeBinary(this.binaryField);
      oprot.writeFieldEnd();
    }
    if (this.stringField != null) {
      oprot.writeFieldBegin(STRING_FIELD_FIELD_DESC);
      oprot.writeString(this.stringField);
      oprot.writeFieldEnd();
    }
    if (this.binaryAsStringField != null) {
      oprot.writeFieldBegin(BINARY_AS_STRING_FIELD_FIELD_DESC);
      oprot.writeString(this.binaryAsStringField);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TestStruct(");
    boolean first = true;

    sb.append("binaryField:");
    if (this.binaryField == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.binaryField, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("stringField:");
    if (this.stringField == null) {
      sb.append("null");
    } else {
      sb.append(this.stringField);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("binaryAsStringField:");
    if (this.binaryAsStringField == null) {
      sb.append("null");
    } else {
      sb.append(this.binaryAsStringField);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

